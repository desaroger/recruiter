/**
 * Created by desaroger on 21/11/16.
 */
import _ from 'lodash';

export default function ContactsRoutesList($scope, $state, $q, Contact, contactsService) {
  /**
   * Function to save the current contact. Can be a new contact.
   *
   * @param {Contact} contact - The contact to be saved.
   * @return {Promise.<Contact>} - The updated contact.
   */
  $scope.save = function save(contact) {
    return Contact.updateWithImage(contact, $scope.image)
      .then((contact) => $scope.loadContact(contact.id))
      .then((contact) => {
        contactsService.update();
        $state.go('.^', {id: contact.id});
        return contact;
      });
  };

  /**
   * Discards the changes of the contact.
   *
   * @param {Contact} contact - The target contact.
   */
  $scope.cancel = function cancel(contact) {
    if ($state.params.id == 'new') {
      $state.go('base.contacts');
    } else {
      $scope.loadContact(contact.id)
        .then(() => {
          $state.go('.^');
        });
    }
  };

  /**
   * Method called by the tag autocomplete. This filters the available tags and gets only the ones
   * that match the query search. Don't confuse with the search, this is the search made when
   * you write on the autocomplete input.
   *
   * @param {String} query - The query being written
   * @return {Array.<String>} - The array of tags matching the query
   */
  $scope.querySearch = function querySearch(query) {
    let tags = contactsService.getAvailableFilters();
    let results = query ? tags.filter((tag) => tag.startsWith(query)) : [];
    return results;
  };


  /*  Image parsing  */

  /**
   * Cleans the image of the scope.
   */
  $scope.cleanImage = function cleanImage() {
    $scope.image = '';
  };

  /**
   * Method called by the image input. Used for parsing the object and return a valid base64 url
   * instad of an object with the base64 inside.
   *
   * @param {File} file - File selected on the input
   * @param {Object} base64Object - The object generated by the input
   * @return {Promise.<String>} - The resultant base64 url
   */
  $scope.imageParser = function imageParser(file, base64Object) {
    let deferred = $q.defer();
    let base64Url = makeBase64Url(base64Object);
    deferred.resolve(base64Url);
    return deferred.promise;
  };

  // When the contact is available, get the image and populate the scope
  $scope.$watch('contact', (contact) => {
    if ($scope.image) {
      return;
    }
    $scope.image = _.get(contact, 'images[0].image');
  });

  /**
   * Converts a 'base-sixty-four-input' model object to a base64 url image.
   *
   * @param {Object} obj - The object of the input
   * @return {string} - The base64 url image.
   */
  function makeBase64Url(obj) {
    return `data:${obj.filetype};base64,${obj.base64}`;
  }
};
